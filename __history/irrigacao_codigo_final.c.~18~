#include <16F877A.h>
#FUSES NOWDT, XT, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP, NOCPD, NOWRT
#use delay(clock=4000000)

// Configuração I2C
#use I2C(master, sda=PIN_C4, scl=PIN_C3, slow=100000)

#include "i2c_Flex_LCD.c"   // LCD via I2C

#define SENSOR_ANALOG_CHANNEL  1    // AN1 = RA1
#define RELE_PIN               PIN_B0

#define LIMITE_SECO   40      // Umidade abaixo deste valor (%) aciona irrigação (ajuste conforme necessário)

void main() {
    set_tris_a(0b00000010);   // RA1 como entrada analógica (sensor)
    set_tris_b(0b11111110);   // RB0 como saída (relé)

    output_high(RELE_PIN);    // Garante relé desligado no início

    setup_adc(ADC_CLOCK_INTERNAL);
    setup_adc_ports(AN1);     // Habilita AN1 (RA1)

    // --- Inicialização do LCD ---
    lcd_init(0x4E, 16, 2);     // Inicializa LCD (ajuste o endereço se necessário)
    lcd_backlight_led(ON);
    lcd_putc('\f');            // Limpa o LCD

    lcd_gotoxy(1,1);           // Linha 1, coluna 1
    printf(lcd_putc, "IRRIGACAO");
    lcd_gotoxy(1,2);           // Linha 2, coluna 1
    printf(lcd_putc, "CONFESSOR");
    delay_ms(2000);            // Espera 2 segundos
    lcd_putc('\f');            // Limpa LCD para operação

    int last_estado_irrigacao = -1;

    while(TRUE) {
        set_adc_channel(SENSOR_ANALOG_CHANNEL);     // Seleciona AN1 (RA1)
        delay_us(20);
        int16 adc_val = read_adc();                 // Lê valor ADC (0-1023)

        // Ajuste: se seu sensor for 0=úmido e 1023=seco, troque a linha abaixo para:
        // int umidade = 100 - ((adc_val * 100L) / 1023);
        int umidade = (int)((adc_val * 100L) / 1023);

        int irrigando = (umidade < LIMITE_SECO) ? 1 : 0;

        if(irrigando != last_estado_irrigacao) {
            lcd_putc('\f');
            if(irrigando) {
                output_low(RELE_PIN);
                lcd_gotoxy(1,1);
                printf(lcd_putc, "Solo Seco      ");
                lcd_gotoxy(1,2);
                printf(lcd_putc, "IRRIGANDO      ");
            } else {
                output_high(RELE_PIN);
                lcd_gotoxy(1,1);
                printf(lcd_putc, "Solo Umido     ");
                lcd_gotoxy(1,2);
                printf(lcd_putc, "UMIDO          ");
            }
            last_estado_irrigacao = irrigando;
        }

        // Sempre mostra a umidade na linha 2 a partir da coluna 10
        lcd_gotoxy(10,2);
        printf(lcd_putc, "%3u%%", umidade);

        delay_ms(500);
    }
}









#define RELE_PIN    PIN_B0     // Pino do relé

void main() {
    set_tris_a(0b00000010);   // RA1 como entrada (sensor)
    set_tris_b(0b11111110);   // RB0 como saída (relé)

    output_high(RELE_PIN);    // Garante relé desligado no início

    // --- Inicialização do LCD ---
    lcd_init(0x4E, 16, 2);     // Inicializa LCD (ajuste o endereço se necessário)
    lcd_backlight_led(ON);
    lcd_putc('\f');            // Limpa o LCD

    lcd_gotoxy(1,1);           // Linha 1, coluna 1
    printf(lcd_putc, "IRRIGACAO");
    lcd_gotoxy(1,2);           // Linha 2, coluna 1
    printf(lcd_putc, "CONFESSOR");
    delay_ms(2000);            // Espera 2 segundos
    lcd_putc('\f');            // Limpa LCD para operação

    int estado_anterior = -1;  // -1 força a mensagem inicial

    while(TRUE) {
        int seco = input(SENSOR_PIN);    // 1 = solo seco, 0 = úmido

        if(seco != estado_anterior) {
            lcd_putc('\f'); // Limpa LCD só quando mudar o estado

            if(seco == 1) {
                output_low(RELE_PIN);   // Liga bomba/relé
                lcd_gotoxy(1,1);
                printf(lcd_putc, "Solo Seco      ");  // Linha 1
                lcd_gotoxy(1,2);
                printf(lcd_putc, "IRRIGANDO      ");  // Linha 2
            } else {
                output_high(RELE_PIN);  // Desliga bomba/relé
                lcd_gotoxy(1,1);
                printf(lcd_putc, "Solo Umido     ");  // Linha 1
                lcd_gotoxy(1,2);
                printf(lcd_putc, "UMIDO          ");  // Linha 2
            }
            estado_anterior = seco;
        } else {
            // Mantém o relé certo mesmo sem mudar a mensagem
            if(seco == 1) {
                output_low(RELE_PIN);
            } else {
                output_high(RELE_PIN);
            }
        }
        delay_ms(500);
    }
}
